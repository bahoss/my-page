{"version":3,"sources":["components/Header.jsx","components/About.jsx","components/Portfolio.jsx","components/Contacts.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Segment","basic","Menu","Item","as","Link","to","color","name","Icon","size","Component","About","Card","Image","src","wrapped","ui","Content","Meta","className","Description","extra","Portfolio","Contacts","href","header","meta","description","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAIqBA,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CAAWC,GAAIC,IAAMC,GAAG,IAAIC,MAAO,OAAQC,KAAK,WAC9C,kBAACC,EAAA,EAAD,CAAMC,KAAM,QAASF,KAAK,iBAD5B,yCAIA,kBAACN,EAAA,EAAKC,KAAN,CAAWC,GAAIC,IAAMC,GAAG,aAAaC,MAAO,OAAQC,KAAK,aACvD,kBAACC,EAAA,EAAD,CAAMC,KAAM,QAASF,KAAK,aAD5B,0DAIA,kBAACN,EAAA,EAAKC,KAAN,CAAWC,GAAIC,IAAMC,GAAG,YAAYC,MAAO,OAAQC,KAAK,YACtD,kBAACC,EAAA,EAAD,CAAMC,KAAM,QAASF,KAAK,sBAD5B,0D,GAb0BG,a,2BCwBrBC,EAzBD,kBACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAI,gEACJC,SAAO,EACPC,IAAI,IAEN,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKd,OAAN,gBACA,kBAACc,EAAA,EAAKM,KAAN,KACE,0BAAMC,UAAU,QAAhB,mBAEF,kBAACP,EAAA,EAAKQ,YAAN,oDAIF,kBAACR,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACb,EAAA,EAAD,CAAMD,KAAK,SADb,iBCMSe,EAvBG,kBAChB,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAI,+DACJC,SAAO,EACPC,IAAI,IAEN,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKd,OAAN,eACA,kBAACc,EAAA,EAAKM,KAAN,uBACA,kBAACN,EAAA,EAAKQ,YAAN,mDAIF,kBAACR,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACb,EAAA,EAAD,CAAMD,KAAK,SADb,iBCNSgB,EATE,kBACf,kBAACX,EAAA,EAAD,CACEY,KAAK,0BACLC,OAAO,eACPC,KAAK,SACLC,YAAY,wG,QCeDC,MAff,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWpB,IAEjC,kBAAC,IAAD,CAAOkB,KAAK,aAAaE,UAAWT,IAEpC,kBAAC,IAAD,CAAOO,KAAK,YAAYE,UAAWR,OCLvBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c9cc71df.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu, Segment, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Segment basic>\n        <Menu>\n          <Menu.Item as={Link} to=\"/\" color={\"blue\"} name=\"aboutme\">\n            <Icon size={\"large\"} name=\"address card\" />\n            Обо мне\n          </Menu.Item>\n          <Menu.Item as={Link} to=\"/portfolio\" color={\"blue\"} name=\"portfolio\">\n            <Icon size={\"large\"} name=\"suitcase\" />\n            Портфолио\n          </Menu.Item>\n          <Menu.Item as={Link} to=\"/contacts\" color={\"blue\"} name=\"contacts\">\n            <Icon size={\"large\"} name=\"handshake outline\" />\n            Контакты\n          </Menu.Item>\n        </Menu>\n      </Segment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\n\nconst About = () => (\n  <Card>\n    <Image\n      src=\"https://react.semantic-ui.com/images/avatar/large/matthew.png\"\n      wrapped\n      ui={false}\n    />\n    <Card.Content>\n      <Card.Header>Matthew</Card.Header>\n      <Card.Meta>\n        <span className=\"date\">Joined in 2015</span>\n      </Card.Meta>\n      <Card.Description>\n        Matthew is a musician living in Nashville.\n      </Card.Description>\n    </Card.Content>\n    <Card.Content extra>\n      <a>\n        <Icon name=\"user\" />\n        22 Friends\n      </a>\n    </Card.Content>\n  </Card>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\n\nconst Portfolio = () => (\n  <Card>\n    <Image\n      src=\"https://react.semantic-ui.com/images/avatar/large/daniel.jpg\"\n      wrapped\n      ui={false}\n    />\n    <Card.Content>\n      <Card.Header>Daniel</Card.Header>\n      <Card.Meta>Joined in 2016</Card.Meta>\n      <Card.Description>\n        Daniel is a comedian living in Nashville.\n      </Card.Description>\n    </Card.Content>\n    <Card.Content extra>\n      <a>\n        <Icon name=\"user\" />\n        10 Friends\n      </a>\n    </Card.Content>\n  </Card>\n);\n\nexport default Portfolio;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\n\nconst Contacts = () => (\n  <Card\n    href=\"#card-example-link-card\"\n    header=\"Elliot Baker\"\n    meta=\"Friend\"\n    description=\"Elliot is a sound engineer living in Nashville who enjoys playing guitar and hanging with his cat.\"\n  />\n);\n\nexport default Contacts;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Portfolio from \"./components/Portfolio\";\nimport Contacts from \"./components/Contacts\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Switch>\n        <Route path=\"/\" exact component={About} />\n\n        <Route path=\"/portfolio\" component={Portfolio} />\n\n        <Route path=\"/contacts\" component={Contacts} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}